const DoctorInfo = require('../Schema/doctorinfoSchema')
const express = require('express');
const router = express.Router();
const Doctor = require('../Schema/doctor'); // Import your Doctor model
const Patient = require('../Schema/Patient'); // Import your Patient model




// Create a new doctor
const createDoctor = async(req, res) => {
    const { firstName, lastName, userName, hospital, houryrate, speciality, dateOfBirth, gender, contactInfo: { email, phone, address } } = req.body;

    try {
        const doctor = new DoctorInfo({ firstName, lastName, userName,hospital, houryrate, speciality, dateOfBirth, gender, contactInfo: { email, phone, address } });
        await doctor.save();
        res.status(200).json(doctor);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
};



// Define a controller function to get a doctor by ID


const getDoctorByusername = async(req, res) => {
    const doctoruserName = req.query.userName; // Assuming you pass the doctor's username as a route parameter
    console.log(doctoruserName);
    try {

        // Use Mongoose to find the doctor by username
        const doctor = await DoctorInfo.find({ userName: doctoruserName })

        if (!doctor) {
            // If no doctor with the given username is found, return a 404 Not Found response
            return res.status(404).json({ message: 'Doctor not found' });
        }

        // If the doctor is found, return it in the response
        res.json(doctor);
    } catch (error) {
        // Handle any errors that occur during the database query
        res.status(500).send(error);
    }
}

///
const updateDoctorProfile = async(req, res) => {
    const doctoruserName = req.query.userName; // Assuming you pass the doctor's ID as a route parameter
    const { hospital } = req.body;


    try {
        // Use Mongoose to find the doctor by ID
        const doctor = await DoctorInfo.findOneAndUpdate({ userName: doctoruserName }, { hospital: hospital });


        if (!doctor) {
            // If no doctor with the given ID is found, return a 404 Not Found response
            return res.status(404).json({ message: 'Doctor not found' });
        }

        // Respond with the updated doctor profile
        await doctor.save();

        res.json(doctor);

    } catch (error) {
        // Handle any errors that occur during the update process
        console.error(error); // Log the error for debugging
        res.status(500).json({ message: 'Internal Server Error' });
    }
};



module.exports = {
    getDoctorByusername,
    updateDoctorProfile,
    createDoctor
};