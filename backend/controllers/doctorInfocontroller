const express = require('express');
const router = express.Router();
const Doctor = require('../Schema/doctor'); // Import your Doctor model
const Patient = require('../Schema/Patient'); // Import your Patient model
const doctor = require('../Schema/doctor');


//create a new Patient
const signUp = async(req, res) => {
        const { username, name, email, password, dob, gender, mobile_number, Efull_name, Emobile_number, relation } = req.body

        const emergency_contact = { full_name: Efull_name, mobile_number: Emobile_number, relation_to_the_patient: relation }

        const patient = new Patient({ username, name, email, password, dob, gender, mobile_number, emergency_contact })

        await patient.save()

        res.status(200).json(patient)
    }

    // Create a new doctor
const createDoctor = async (req, res) => {
        const {
            username,
            name,
            speciality,
            rate,
            affiliation,
            education,
            email, // Add the email field to the request body
            availableDates,
            patients,
        } = req.body;
    
        try {
            const doctor = new Doctor({
                username,
                name,
                speciality,
                rate,
                affiliation,
                education,
                email, // Include the email field in the Doctor creation
                availableDates,
                patients,
            });
    
            await doctor.save();
            res.status(201).json(doctor); // Use status 201 for resource creation
        } catch (error) {
            res.status(400).json({ error: error.message });
        }
 };
    



// Define a controller function to get a doctor by ID
const getDoctorByusername = async(req, res) => {
    const doctoruserName = req.query.userName; // Assuming you pass the doctor's username as a route parameter
    console.log(doctoruserName);
    try {

        // Use Mongoose to find the doctor by username
        const doctor = await DoctorInfo.find({ username: doctoruserName })

        if (!doctor) {
            // If no doctor with the given username is found, return a 404 Not Found response
            return res.status(404).json({ message: 'Doctor not found' });
        }

        // If the doctor is found, return it in the response
        res.json(doctor);
    } catch (error) {
        // Handle any errors that occur during the database query
        res.status(500).send(error);
    }
}
//update Rate
const updateRate = async (req, res) => {
    const doctorUsername = req.query.username; // Assuming you pass the doctor's username as a query parameter
    const { rate } = req.body; // Change from email to rate
  
    try {
      // Use Mongoose to find the doctor by username
      const doctor = await Doctor.findOneAndUpdate(
        { username: doctorUsername },
        { rate: rate } // Change the field to update to rate
      );
  
      if (!doctor) {
        // If no doctor with the given username is found, return a 404 Not Found response
        return res.status(404).json({ message: 'Doctor not found' });
      }
  
      // Update the doctor's rate
      doctor.rate = rate; // Change the field to update to rate
  
      // Save the updated doctor profile
      await doctor.save();
  
      // Respond with the updated doctor profile
      res.json(doctor);
    } catch (error) {
      // Handle any errors that occur during the update process
      console.error(error); // Log the error for debugging
      res.status(500).json({ message: 'Internal Server Error' });
    }
 };
//update doctor email
const updateEmail = async (req, res) => {
    const doctorUsername = req.query.username; // Assuming you pass the doctor's username as a query parameter
    const { email } = req.body; // Change from affiliation to email
  
    try {
      // Use Mongoose to find the doctor by username
      const doctor = await Doctor.findOneAndUpdate(
        { username: doctorUsername },
        { email: email } // Change the field to update to email
      );
  
      if (!doctor) {
        // If no doctor with the given username is found, return a 404 Not Found response
        return res.status(404).json({ message: 'Doctor not found' });
      }
  
      // Update the doctor's email
      doctor.email = email; // Change the field to update to email
  
      // Save the updated doctor profile
      await doctor.save();
  
      // Respond with the updated doctor profile
      res.json(doctor);
    } catch (error) {
      // Handle any errors that occur during the update process
      console.error(error); // Log the error for debugging
      res.status(500).json({ message: 'Internal Server Error' });
    }
  };
///update hospital
const updateDoctorProfile = async(req, res) => {
    const doctorUsername = req.query.username; // Assuming you pass the doctor's username as a query parameter
    console.log(doctorUsername)
    const { affiliation } = req.body;

    try {
        // Use Mongoose to find the doctor by username
        const doctor = await Doctor.findOneAndUpdate({ username: doctorUsername }, { affiliation: affiliation });

        if (!doctor) {
            // If no doctor with the given username is found, return a 404 Not Found response
            return res.status(404).json({ message: 'Doctor not found' });
        }

        // Update the doctor's affiliation
        doctor.affiliation = affiliation;

        // Save the updated doctor profile
        await doctor.save();

        // Respond with the updated doctor profile
        res.json(doctor);
    } catch (error) {
        // Handle any errors that occur during the update process
        console.error(error); // Log the error for debugging
        res.status(500).json({ message: 'Internal Server Error' });
    }
};


module.exports = {
    getDoctorByusername,
    updateDoctorProfile,
    createDoctor,
    updateRate,
    updateEmail
};