const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const Doctor = require('../Schema/doctor'); // Import your Doctor model
const Patient = require('../Schema/Patient'); // Import your Patient model
const Appointment = require('../Schema/appointment');


//add patients to a doc using the doc username so we can use it whenever we create an appointment 
const addPatientToDoctor = async (req, res) => {
  try {
      const { doctorUsername, patientUsername } = req.body;

      // Find the doctor by username
      const doctor = await Doctor.findOne({ username: doctorUsername });

      if (!doctor) {
          return res.status(404).json({ message: 'Doctor not found' });
      }

      // Find the patient by username
      const patient = await Patient.findOne({ username: patientUsername });

      if (!patient) {
          return res.status(404).json({ message: 'Patient not found' });
      }

      // Add the patient's username to the doctor's list of patients
      doctor.patients.push(patient.username);
      await doctor.save();

      res.status(200).json(doctor);
  } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Internal Server Error' });
  }
};

//create a new appointment
//We changed the app schema to ref the username of both the pat and the doc so if we can change it by ID it would be better
const createAppointment = async (req, res) => {
  try {
    const { dusername, pusername, appointmentDate } = req.body;

    // Find the doctor and patient by username
    const doctor = await Doctor.findOne({ username: dusername });
    const patient = await Patient.findOne({ username: pusername });

    if (!doctor || !patient) {
      return res.status(400).json({ message: 'Doctor or patient not found' });
    }

    // Create a new appointment
    const appointment = new Appointment({
      doctor: doctor.username, // Reference the doctor by username
      patient: patient.username, // Reference the patient by username
      appointmentDate: new Date(appointmentDate), // Convert the appointmentDate to a Date object
    });
   
    await appointment.save();

    // Use the addPatientToDoctor function to add the patient to the doctor's list
    await addPatientToDoctor(doctor.username, patient.username);

    res.status(201).json(appointment);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Controller to create a new patient
const createPatient = async (req, res) => {
  const {
    username,
    name,
    email,
    password,
    dob,
    gender,
    mobilenumber,
    emergencycontact: { full_name, mobile_number, relation_to_the_patient },
    health_records,
  } = req.body;

  try {
    const patient = new Patient({
      username,
      name,
      email,
      password,
      dob,
      gender,
      mobilenumber,
      emergencycontact: {
        full_name,
        mobile_number,
        relation_to_the_patient,
      },
      health_records,
    });

    await patient.save();
    res.status(200).json(patient);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

module.exports = createPatient;



 // Create a new doctor
const createDoctor = async (req, res) => {
        const {
            username,
            name,
            speciality,
            rate,
            affiliation,
            education,
            email, // Add the email field to the request body
            availableDates,
            patients,
        } = req.body;
    
        try {
            const doctor = new Doctor({
                username,
                name,
                speciality,
                rate,
                affiliation,
                education,
                email, // Include the email field in the Doctor creation
                availableDates,
                patients,
            });
    
            await doctor.save();
            res.status(201).json(doctor); // Use status 201 for resource creation
        } catch (error) {
            res.status(400).json({ error: error.message });
        }
 };
  
// Define a controller function to get a doctor by ID
const getDoctorByusername = async(req, res) => {
    const doctoruserName = req.query.userName; // Assuming you pass the doctor's username as a route parameter
    console.log(doctoruserName);
    try {

        // Use Mongoose to find the doctor by username
        const doctor = await DoctorInfo.find({ username: doctoruserName })

        if (!doctor) {
            // If no doctor with the given username is found, return a 404 Not Found response
            return res.status(404).json({ message: 'Doctor not found' });
        }

        // If the doctor is found, return it in the response
        res.json(doctor);
    } catch (error) {
        // Handle any errors that occur during the database query
        res.status(500).send(error);
    }
}
//update Rate
const updateRate = async (req, res) => {
    const doctorUsername = req.query.username; // Assuming you pass the doctor's username as a query parameter
    const { rate } = req.body; // Change from email to rate
  
    try {
      // Use Mongoose to find the doctor by username
      const doctor = await Doctor.findOneAndUpdate(
        { username: doctorUsername },
        { rate: rate } // Change the field to update to rate
      );
  
      if (!doctor) {
        // If no doctor with the given username is found, return a 404 Not Found response
        return res.status(404).json({ message: 'Doctor not found' });
      }
  
      // Update the doctor's rate
      doctor.rate = rate; // Change the field to update to rate
  
      // Save the updated doctor profile
      await doctor.save();
  
      // Respond with the updated doctor profile
      res.json(doctor);
    } catch (error) {
      // Handle any errors that occur during the update process
      console.error(error); // Log the error for debugging
      res.status(500).json({ message: 'Internal Server Error' });
    }
 };
//update doctor email
const updateEmail = async (req, res) => {
    const doctorUsername = req.query.username; // Assuming you pass the doctor's username as a query parameter
    const { email } = req.body; // Change from affiliation to email
  
    try {
      // Use Mongoose to find the doctor by username
      const doctor = await Doctor.findOneAndUpdate(
        { username: doctorUsername },
        { email: email } // Change the field to update to email
      );
  
      if (!doctor) {
        // If no doctor with the given username is found, return a 404 Not Found response
        return res.status(404).json({ message: 'Doctor not found' });
      }
  
      // Update the doctor's email
      doctor.email = email; // Change the field to update to email
  
      // Save the updated doctor profile
      await doctor.save();
  
      // Respond with the updated doctor profile
      res.json(doctor);
    } catch (error) {
      // Handle any errors that occur during the update process
      console.error(error); // Log the error for debugging
      res.status(500).json({ message: 'Internal Server Error' });
    }
  };
///update hospital
const updateDoctorProfile = async(req, res) => {
    const doctorUsername = req.query.username; // Assuming you pass the doctor's username as a query parameter
    console.log(doctorUsername)
    const { affiliation } = req.body;

    try {
        // Use Mongoose to find the doctor by username
        const doctor = await Doctor.findOneAndUpdate({ username: doctorUsername }, { affiliation: affiliation });

        if (!doctor) {
            // If no doctor with the given username is found, return a 404 Not Found response
            return res.status(404).json({ message: 'Doctor not found' });
        }

        // Update the doctor's affiliation
        doctor.affiliation = affiliation;

        // Save the updated doctor profile
        await doctor.save();

        // Respond with the updated doctor profile
        res.json(doctor);
    } catch (error) {
        // Handle any errors that occur during the update process
        console.error(error); // Log the error for debugging
        res.status(500).json({ message: 'Internal Server Error' });
    }
};
module.exports = {
    getDoctorByusername,
    updateDoctorProfile,
    createDoctor,
    updateRate,
    updateEmail,
    createPatient,
    createAppointment,
    addPatientToDoctor
};